{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "config:DeleteDeliveryChannel",
                    "config:DescribeConfigurationRecorders",
                    "config:DescribeDeliveryChannels",
                    "config:PutConfigurationRecorder",
                    "config:StopConfigurationRecorder"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "s3bucketaccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:putobject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "LambdaScratchBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2c34f0d8-57cd-4ef7-a84c-f3e1885a6313"
        }
      }
    },
    "UploadLambdaSourceToS3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "console.log('Loading event');",
                "var http = require('http');",
                "var https = require('https');",
                "var url = require('url');",
                "var aws = require('aws-sdk');",
                "var s3 = new aws.S3();",
                "var cfnresponse = require('cfn-response');",
                "exports.handler = function (event, context) {",
                "  ",
                "    // Loop through the lambda functions we've been asked to download",
                "    event.ResourceProperties.LambdaFunctionsSource.forEach(function(lambdaURL){",
                "        ",
                "        lambdaURL = url.parse(lambdaURL)",
                "        if (lambdaURL.protocol == 'http:'){",
                "            webrequest = http",
                "        }else if(lambdaURL.protocol == 'https:'){",
                "            webrequest = https",
                "        }else{",
                "             cfnresponse.send(event, context, cfnresponse.FAIL, {error:'Could not identify download protocol from uri'})",
                "        }",
                "        var options = {",
                "          host: lambdaURL.host,",
                "          port: 443,",
                "          path: lambdaURL.pathname",
                "        };",
                "",
                "        webrequest.get(options, function(response) {",
                "          console.log('Got response: ' + response.statusCode  + ' from ' + lambdaURL.href + ' commencing download');",
                "            ",
                "          // Continuously update stream with data",
                "          var body = '';",
                "          response.on('data', function(d) {",
                "              body += d;",
                "          });",
                "          response.on('end', function() {",
                "",
                "              console.log('Finished downloading file, uploading to S3 bucket ' + event.ResourceProperties.BucketName)",
                "              var bucketKey = lambdaURL.pathname.replace(/^\\//,'')",
                "              s3.putObject({",
                "                Bucket: event.ResourceProperties.BucketName,",
                "                Key: bucketKey,",
                "                ACL: 'private',",
                "                Body: body,",
                "                ContentDisposition: 'inline',",
                "                ContentType: 'text/plain'",
                "              }, function (err, data) {",
                "                if (err) {",
                "                  cfnresponse.send(event, context, cfnresponse.FAIL, {error:'Error adding object to bucket ' + event.ResourceProperties.BucketName + ' - ' + JSON.stringify(err)})",
                "                }",
                "                console.log('Upload to S3 successful')",
                "                cfnresponse.send(event, context, cfnresponse.SUCCESS, {",
                "                  key: bucketKey,",
                "                  bucketName: event.ResourceProperties.BucketName,",
                "                  objectURL: 'https://s3-' + aws.config.region + '.amazonaws.com/' + event.ResourceProperties.BucketName + '/' + bucketKey",
                "                });",
                "              });",
                "          });",
                "        }).on('error', function(e) {",
                "          console.log('Got error: ' + e.message);",
                "        });    ",
                "    })",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LambdaScratchBucket"
      ],
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "46524450-99d2-40cc-b39f-92323ca5c80d"
        }
      }
    },
    "UploadLambdaSourceToS3Action": {
      "Type": "Custom::UploadLambdaSourceToS3Action",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UploadLambdaSourceToS3",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "LambdaScratchBucket"
        },
        "LambdaFunctionsSource": [
          "https://raw.githubusercontent.com/awslabs/aws-config-rules/master/node/cloudtrail_enabled_all_regions-periodic.js"
        ]
      },
      "DependsOn": [
        "UploadLambdaSourceToS3"
      ],
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "82080fe3-2ef1-4735-80a5-ba33cbd22b7a"
        }
      }
    },
    "CloudTrailEnabled": {
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "Source": {
          "Owner": "AWS",
          "SourceIdentifier": "CLOUD_TRAIL_ENABLED"
        },
        "InputParameters": {
          "s3BucketName": {
            "Ref": "CloudTrailS3Bucket"
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "45f12186-99c8-4386-a15d-461cf500e145"
        }
      }
    },
    "LambdaConfigRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "config:Put*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "764ce70c-f1ac-44b7-a0a4-169934a9ff0f"
        }
      }
    },
    "lambdacloudtrailenabledallregionsperiodic": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaScratchBucket"
          },
          "S3Key": "awslabs/aws-config-rules/master/node/cloudtrail_enabled_all_regions-periodic.js"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "LambdaConfigRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadLambdaSourceToS3Action",
        "LambdaConfigRole"
      ],
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "b5da9ee8-e7d1-42b2-abd6-723ff10e292c"
        }
      }
    },
    "cloudtrailenabledallregionsperiodic": {
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "cloudtrail_enabled_all_regions-periodic",
        "Description": "Ensure CloudTrail is enabled in all regions",
        "Source": {
          "Fn::GetAtt": [
            "lambdacloudtrailenabledallregionsperiodic",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "lambdacloudtrailenabledallregionsperiodic"
      ],
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4495d30b-1ec4-415f-b8c8-222de2502d8e"
        }
      }
    },
    "LambdaScratchBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {},
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a53be3d4-6fff-4020-b854-301b3253301e"
        }
      }
    }
  },
  "Parameters": {
    "CloudTrailS3Bucket": {
      "Type": "String",
      "Description": "The name of the S3 bucket to which you should be pushing CloudTrail logs."
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "a53be3d4-6fff-4020-b854-301b3253301e": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 440,
          "y": 90
        },
        "z": 1,
        "embeds": []
      },
      "764ce70c-f1ac-44b7-a0a4-169934a9ff0f": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 560,
          "y": -40
        },
        "z": 1,
        "embeds": []
      },
      "45f12186-99c8-4386-a15d-461cf500e145": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 690,
          "y": 210
        },
        "z": 1,
        "embeds": []
      },
      "2c34f0d8-57cd-4ef7-a84c-f3e1885a6313": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": -40
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "a53be3d4-6fff-4020-b854-301b3253301e"
        ]
      },
      "46524450-99d2-40cc-b39f-92323ca5c80d": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "a53be3d4-6fff-4020-b854-301b3253301e"
        ],
        "isrelatedto": [
          "2c34f0d8-57cd-4ef7-a84c-f3e1885a6313"
        ]
      },
      "82080fe3-2ef1-4735-80a5-ba33cbd22b7a": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "46524450-99d2-40cc-b39f-92323ca5c80d"
        ],
        "isrelatedto": [
          "46524450-99d2-40cc-b39f-92323ca5c80d",
          "a53be3d4-6fff-4020-b854-301b3253301e"
        ]
      },
      "b5da9ee8-e7d1-42b2-abd6-723ff10e292c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 560,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "82080fe3-2ef1-4735-80a5-ba33cbd22b7a",
          "764ce70c-f1ac-44b7-a0a4-169934a9ff0f"
        ],
        "isrelatedto": [
          "a53be3d4-6fff-4020-b854-301b3253301e",
          "764ce70c-f1ac-44b7-a0a4-169934a9ff0f"
        ]
      },
      "4495d30b-1ec4-415f-b8c8-222de2502d8e": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 560,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "b5da9ee8-e7d1-42b2-abd6-723ff10e292c"
        ],
        "isrelatedto": [
          "b5da9ee8-e7d1-42b2-abd6-723ff10e292c"
        ]
      }
    }
  }
}
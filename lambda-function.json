{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "32f27460-ece9-47a7-b917-72c53c68af5c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 225,
          "y": 134
        },
        "z": 0
      }
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "config:DeleteDeliveryChannel",
                "config:DescribeConfigurationRecorders",
                "config:DescribeDeliveryChannels",
                "config:PutConfigurationRecorder",
                "config:StopConfigurationRecorder"
            ],
            "Resource": [
                "*"
            ]
            }]
          }
        }]
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "// dependencies",
            "var AWS = require('aws-sdk');",
            "var response = require('cfn-response');",
            "var configservice = new AWS.ConfigService();",
            "exports.handler = function(event, context, callback) {",
            "    ",
            "    console.log('Checking if a configuration recorder exists')",
            "    configservice.describeConfigurationRecorders(null, function(err, data) {",
            "      if (err) console.log(err, err.stack); // an error occurred",
            "      else{",
            "        if(data.ConfigurationRecorders.length > 0){",
            "            // successful response",
            "            var configurationRecorders = data",
            "            console.log('Checking for the existence of a Delivery Channel')",
            "            configservice.describeDeliveryChannels(null, function(err, data) {",
            "                if (err) console.log(err, err.stack); // an error occurred",
            "                else{",
            "                    if(data.DeliveryChannels.length > 0){",
            "                        console.log('There is a Delivery Channel, let\\'s delete it!')",
            "                        deliveryChannels = data",
            "                        console.log('Making sure the Delivery Recorder is stopped')",
            "                        var params = { ConfigurationRecorderName: configurationRecorders.ConfigurationRecorders[0].name};",
            "                        configservice.stopConfigurationRecorder(params, function(err, data) {",
            "                          if (err) console.log(err, err.stack); // an error occurred",
            "                          else{",
            "                              console.log('Deleting Delivery Channel')",
            "                               params = { DeliveryChannelName: deliveryChannels.DeliveryChannels[0].name }",
            "                                configservice.deleteDeliveryChannel(params, function(err, data) {",
            "                                  if (err) console.log(err, err.stack); // an error occurred",
            "                                  else  console.log('Successfully deleted Delivery Channel')    // successful response",
            "                                });",
            "                          }   ",
            "                        }); ",
            "                    }else{",
            "                        console.log('No Delivery Channel to Delete')",
            "                    }",
            "                }",
            "            })",
            "        ",
            "            // Return the name of the configuration recorder as one exists",
            "            response.send(event, context, response.SUCCESS, {'ConfigurationRecorder':configurationRecorders.ConfigurationRecorders[0].name});",
            "        }else{",
            "            console.log('No Configuration Records exist, returning default recorder name')",
            "            response.send(event, context, response.SUCCESS, {'ConfigurationRecorder':'ConfigurationRecorder'});",
            "        }",
            "      }   ",
            "    });",
            "};"

         ]]}
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] }
      }
    },
    "NetworkInfo": {
  "Type": "Custom::NetworkInfo",
  "Properties": {
    "ServiceToken": { "Fn::GetAtt" : ["LookupStackOutputs", "Arn"] },
    "StackName": "test1"
  }
}
    
  },
  "Outputs" : {
  "TestOutput" : {
    "Description" : "Information about the value",
    "Value" : { "Fn::GetAtt": [ "NetworkInfo", "ConfigurationRecorder" ] }
  }
}
}